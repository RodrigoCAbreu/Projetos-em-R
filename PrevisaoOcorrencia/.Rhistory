setwd("~/Projetos-em-R/PrevisaoOcorrencia")
dados <- read.csv("dataset.csv", stringsAsFactors = FALSE)
dim(dados)
str(dados)
View(dados)
dados$id = NULL
dados$diagnosis = sapply(dados$diagnosis, function(x){ifelse(x=='M', 'Maligno', 'Benigno')})
table(dados$diagnosis)
dados$diagnosis <- factor(dados$diagnosis, levels = c("Benigno", "Maligno"), labels = c("Benigno", "Maligno"))
str(dados$diagnosis)
round(prop.table(table(dados$diagnosis)) * 100, digits = 1)
summary(dados[c("radius_mean", "area_mean", "smoothness_mean")])
normalizar <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalizar(c(1, 2, 3, 4, 5))
normalizar(c(10, 20, 30, 40, 50))
dados_norm <- as.data.frame(lapply(dados[2:31], normalizar))
View(dados_norm)
library(class)
dados_treino <- dados_norm[1:469, ]
dados_teste <- dados_norm[470:569, ]
dados_treino
dados_treino
View(dados_teste)
dados_treino_labels <- dados[1:469, 1]
dados_teste_labels <- dados[470:569, 1]
length(dados_treino_labels)
length(dados_teste_labels)
View(dados_teste_labels)
?knn
dim(dados_treino)
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 30)
summary(modelo_knn_v1)
library(gmodels)
CrossTable(x = dados_teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 10)
summary(modelo_knn_v1)
CrossTable(x = dados_teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
summary(modelo_knn_v1)
CrossTable(x = dados_teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
?scale()
dados
dados_z <- as.data.frame(scale(dados[-1]))
dados_z
summary(dados_z$area_mean)
dados_treino <- dados_z[1:469, ]
dados_teste <- dados_z[470:569, ]
dados_treino_labels <- dados[ 1: 469, 1]
dados_teste_labels <- dados[ 470: 569, 1]
modelo_knn_v2 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
CrossTable(x = dados_teste_labels, y = modelo_knn_v2, prop.chisq = FALSE)
set.seed(40)
dados <- read.csv("dataset.csv", stringsAsFactors = FALSE)
dados$id = NULL
dados[,'index'] <- ifelse(runif(nrow(dados)) < 0.8,1,0)
View(dados)
trainset <- dados[dados$index==1,]
testset <- dados[dados$index==0,]
trainColNum <- grep('index', names(trainset))
trainColNum
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
typeColNum <- grep('diag',names(dados))
typeColNum
install.packages("e1071")
library(e1071)
modelo_svm_v1 <- svm(diagnosis ~ .,
data = trainset,
type = 'C-classification',
kernel = 'radial')
pred_train <- predict(modelo_svm_v1, trainset)
mean(pred_train == trainset$diagnosis)
pred_test <- predict(modelo_svm_v1, testset)
mean(pred_test == testset$diagnosis)
table(pred_test, testset$diagnosis)
library(rpart)
modelo_rf_v1 = rpart(diagnosis ~ ., data = trainset, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1, testset, type='class')
mean(tree_pred==testset$diagnosis)
table(tree_pred, testset$diagnosis)
