setwd("~/Projetos-em-R/PrevisaoDemandaPorAluguel")
source("src/Tools.R")
bikes <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
source("Tools.R")
bikes <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
cols <- c("dteday", "mnth", "hr", "holiday",
"workingday", "weathersit", "temp",
"hum", "windspeed", "cnt")
bikes <- bikes[, cols]
View(bikes)
bikes$dteday <- char.toPOSIXct(bikes)
bikes <- na.omit(bikes)
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
cols <- c("mnth", "hr", "holiday", "workingday",
"weathersit", "temp", "hum", "windspeed",
"isWorking", "monthCount", "dayWeek",
"workTime", "xformHr", "cnt")
cols <- c("mnth", "hr", "holiday", "workingday",
"weathersit", "temp", "hum", "windspeed",
"isWorking", "monthCount", "dayWeek",
"workTime", "xformHr", "cnt")
metodos <- c("pearson", "spearman")
cors <- lapply(metodos, function(method)
(cor(bikes[, cols], method = method)))
cols <- c("mnth", "hr", "holiday", "workingday",
"weathersit", "temp", "hum", "windspeed",
"isWorking", "monthCount", "dayWeek",
"workTime", "xformHr", "cnt")
metodos <- c("pearson", "spearman")
cors <- lapply(metodos, function(method)
(cor(bikes[, cols], method = method)))
if(Azure){
source("src/Tools.R")
bikes <- maml.mapInputPort(1)
bikes$dteday <- set.asPOSIXct(bikes)
}else{
bikes <- bikes
}
Azure <- FALSE
if(Azure){
source("src/Tools.R")
bikes <- maml.mapInputPort(1)
bikes$dteday <- set.asPOSIXct(bikes)
}else{
bikes <- bikes
}
cols <- c("mnth", "hr", "holiday", "workingday",
"weathersit", "temp", "hum", "windspeed",
"isWorking", "monthCount", "dayWeek",
"workTime", "xformHr", "cnt")
metodos <- c("pearson", "spearman")
cors <- lapply(metodos, function(method)
(cor(bikes[, cols], method = method)))
cors <- lapply(metodos, function(method)
(cor(bikes[, cols], method = method)))
bikes <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
bikes
cols <- c("dteday", "mnth", "hr", "holiday",
"workingday", "weathersit", "temp",
"hum", "windspeed", "cnt")
bikes <- bikes[, cols]
View(bikes)
bikes$dteday <- char.toPOSIXct(bikes)
bikes <- na.omit(bikes)
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
bikes <- month.count(bikes)
bikes$dayWeek <- as.factor(weekdays(bikes$dteday))
bikes$dayWeek <- as.numeric(ordered(bikes$dayWeek,
levels = c("segunda-feira",
"terça-feira",
"quarta-feira",
"quinta-feira",
"sexta-feira",
"sábado",
"domingo")))
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
# Transforma os valores de hora na madrugada, quando a demanda por bibicletas é praticamente nula
bikes$xformHr <- ifelse(bikes$hr > 4, bikes$hr - 5, bikes$hr + 19)
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
cols <- c("mnth", "hr", "holiday", "workingday",
"weathersit", "temp", "hum", "windspeed",
"isWorking", "monthCount", "dayWeek",
"workTime", "xformHr", "cnt")
metodos <- c("pearson", "spearman")
cors <- lapply(metodos, function(method)
(cor(bikes[, cols], method = method)))
head(cors)
require(lattice)
plot.cors <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
Map(plot.cors, cors, metodos)
plot.cors <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
Map(plot.cors, cors, metodos)
Map
Map(plot.cors, cors, metodos)
Map(plot.cors, cors, metodos)
[]
Map(plot.cors, cors, metodos)
require(lattice)
plot.cors <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
Map(plot.cors, cors, metodos)
cors <- lapply(metodos, function(method)
(cor(bikes[, cols], method = method)))
head(cors)
require(lattice)
plot.cors <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
Map(plot.cors, cors, metodos)
detach("package:lattice", unload = TRUE)
library(lattice)
install.packages("lattice")
install.packages("lattice")
require(lattice)
plot.cors <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
Map(plot.cors, cors, metodos)
times <- c(7, 9, 12, 15, 18, 20, 22)
tms.plot <- function(times){
ggplot(bikes[bikes$workTime == times, ], aes(x = dteday, y = cnt)) +
geom_line() +
ylab("Numero de Bikes") +
labs(title = paste("Demanda de Bikes as ", as.character(times), ":00", sep = "")) +
theme(text = element_text(size = 20))
}
require(ggplot2)
lapply(times, tms.plot)
bikes$dayWeek <- fact.conv(bikes$dayWeek)
# Demanda de bikes x potenciais variáveis preditoras
labels <- list("Boxplots - Demanda de Bikes por Hora",
"Boxplots - Demanda de Bikes por Estação",
"Boxplots - Demanda de Bikes por Dia Útil",
"Boxplots - Demanda de Bikes por Dia da Semana")
xAxis <- list("hr", "weathersit", "isWorking", "dayWeek")
plot.boxes  <- function(X, label){
ggplot(bikes, aes_string(x = X, y = "cnt", group = X)) +
geom_boxplot( ) +
ggtitle(label) +
theme(text = element_text(size = 18))
}
Map(plot.boxes, xAxis, labels)
